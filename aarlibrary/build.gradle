apply plugin: 'com.android.library'
// 配置上传AAR所有的远程依赖上传至本地Maven仓库
apply plugin: 'maven'
apply plugin: 'com.novoda.bintray-release' // must be applied after your artifact generating plugin (eg. java / com.android.library)

// 基本的配置
android {
    // 注意：无论是打Jar还是生成AAR,都建议删除下面的版本号和版本名称
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 27
//        versionCode 1
//        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        // 注意生成AAR时设置混淆打开时,需要暴露给调用者类和方法等，必须要在混淆配置文件中keep掉
        release {
            minifyEnabled true // 主要包含三部分功能：压缩、混淆和优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.github.piasy:BigImageViewer:1.4.6'
    implementation 'com.github.nanchen2251:CompressHelper:1.0.5'
}

// 配置上传AAR所有的远程依赖上传至本地Maven仓库
uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = "com.aar.test" // Library包名
            pom.artifactId = "remote-dependcies-release" // Library名称
            pom.version = "1.1.3" // Library 的版本号
            repository(url: "file://localhost/" + "Users/reesehu/Library/Android/sdk" + "/extras/android/m2repository/")
        }
    }
}

//  build.gradle 中使用Bintray提供的插件来编译，打包项目
//apply from: 'bintray-config.gradle'
//// 切记：以下代码必须放在 build.gradle 文件末尾
//// 将本地项目编译，打包成 aar。并生成所需的 pom.xml 等文件
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
//// 将生成的这些文件都上传至你的 bintray 仓库中去
//apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'

// 使用bintray-release 上传至bintray,下面为publish闭包配置
publish {
    userOrg = 'ternencehu' // bintray用户名
    repoName = 'brewer'
    groupId = 'com.sharepeng'
    artifactId = 'bintray-release'
    publishVersion = '1.5.0'
    desc = 'Oh hi, this is a nice description for a project, right?'
    website = 'https://github.com/novoda/bintray-release' // 一个与该项目网址相关的URL字符串。可以在这里使用Github 仓库。
//    uploadName = 'FirstTestRepository' // 早bintray包中显示的名称，不设置默认为artifactId
// https://brewfarmers.bintray.com/FirstTestRepository
}

//使用任务bintrayUpload发布（需要先编译项目！）: 针对个人开源库，实现在指定brewer下直接自动创建包为bintray-release
// (包名可随意指定，下面命令会自动帮你创建好)的公开目录
// c621ca75c9078b32ab2a21318b17521fe3293641
//  ./gradlew clean build bintrayUpload -PbintrayUser=ternencehu -PbintrayKey=c621ca75c9078b32ab2a21318b17521fe3293641 -PdryRun=false